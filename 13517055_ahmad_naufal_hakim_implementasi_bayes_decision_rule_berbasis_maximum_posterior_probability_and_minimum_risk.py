# -*- coding: utf-8 -*-
"""13517055 Ahmad Naufal Hakim - Implementasi Bayes Decision Rule berbasis Maximum Posterior Probability and Minimum Risk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kk24uTuA7rSqKqKmgaDPUsUJpIVR8l4t

# Implementasi Bayes Decision Rule berbasis Maximum Posterior Probability and Minimum Risk

- Nama : Ahmad Naufal Hakim
- NIM : 13517055
- Link code : https://github.com/ahmadnaufalhakim/IF5181-Bayes-Decision-Rule
- Link video : https://www.youtube.com/watch?v=53mht_IIagE

## Deskripsi Masalah
Klasifikasi apakah suatu ikan merupakan ikan salmon atau ikan seabass menggunakan bantuan data histogram jumlah ikan salmon dan seabass terhadap warna kulitnya.

## Deskripsi Solusi atau Implementasi
Untuk menyelesaikan permasalahan di atas, akan diimplementasikan Bayes Decision Rule berbasis Maximum Posterior Probability dan Minimum Risk dengan menggunakan bahasa Python.

Data yang digunakan berasal dari histogram dalam buku *Pattern Classification, 2nd Ed.* oleh Richard O. Duda (2001) di halaman 6 (figure 1.3).

Dari histogram tersebut, dibuat sebuah file csv dengan 3 kolom (lightness, countSalmon, dan countSeaBass), lalu dilakukan perhitungan probabilitas dan implementasi Bayes Decision Rule menggunakan bahasa Python.

## 1. Import file csv yang berisikan lightness, countSalmon, dan countSeaBass
"""

import pandas as pd
data = pd.read_csv("lightness_fish_classification.csv")
data.head()

n_salmon = sum(data['countSalmon'])
print('Jumlah ikan salmon:', n_salmon)

n_seabass = sum(data['countSeaBass'])
print('Jumlah ikan seabass:', n_seabass)

"""X menyatakan sebuah range lightness dari ikan:

- x[0] = `'0.5-1.0'`
- x[1] = `'1.0-1.5'`
- dst.
"""

x = [lightness for lightness in data['lightness']]
x

"""## 2. Mencari nilai P(kelas) dan P(x | kelas).

P(kelas) di mana kelas = __[salmon, seabass]__

- P(salmon) = n1 / (n1 + n2)

- P(seabass) = n2 / (n1 + n2)
"""

n_fishes = n_salmon + n_seabass

P_prior = {
  'salmon': n_salmon / n_fishes,
  'seabass': n_seabass / n_fishes
}

P_prior

"""P(x | kelas) = P(x, kelas) / N_kelas"""

P_conditional = {
  row['lightness']: {
    'salmon': row['countSalmon'] / n_salmon,
    'seabass': row['countSeaBass'] / n_seabass
  } for index, row in data.iterrows()
}

P_conditional

"""## 3. Implementasi Bayes Decision Rule berbasis *Maximum Posterior Probability*

Nilai probabilitas posterior untuk suatu kelas w_i diberikan data x bisa didapatkan dengan menggunakan formula perhitungan sebagai berikut:

> P(w_i | x) = *likelihood * prior / evidence*

atau

> P(w_i | x) = (P(x | w_i) * P(w_i)) / P(x)

Karena nilai P(w_i | x) akan dibandingkan antar semua kelas w yang ada dan nilai P(x) untuk semua kelas bernilai sama, maka nilai P(x) bisa kita abaikan dalam perhitungan.
"""

P_posterior = {
  'salmon': {
    row['lightness']: P_conditional[row['lightness']]['salmon'] * P_prior['salmon'] for index, row in data.iterrows()
  },
  'seabass': {
    row['lightness']: P_conditional[row['lightness']]['seabass'] * P_prior['seabass'] for index, row in data.iterrows()
  }
}

for key1, value1 in P_posterior.items() :
  print(key1)
  for key2, value2 in value1.items() :
    print('\t', key2, ':', value2)

"""Setelah mendapatkan nilai probabilitas posterior untuk kelas salmon dan seabass, maka kita bisa menentukan *decision class* yang akan diambil untuk setiap interval yang ada berdasarkan nilai probabilitas tersebut."""

for interval in x :
  decision = 'salmon' if max(P_posterior['salmon'][interval], P_posterior['seabass'][interval]) == P_posterior['salmon'][interval] else 'seabass'
  print('Ikan dengan nilai lightness', interval, 'akan diklasifikasikan sebagai ikan', decision)

"""## 4. Implementasi Bayes Decision Rule berbasis *Minimum Risk*

Dalam Bayes Decision Rule berbasis *Minimum Risk*, didefinisikan nilai alpha adalah action yang diambil untuk menentukan kelas suatu data berdasarkan nilai *loss* ketika mengambil action tersebut.

Contoh: untuk __mengambil__ atau __meninggalkan__ mata kuliah berdasarkan klasifikasi *good*, *fair*, atau *bad* pada sebuah mata kuliah

Dalam kasus ini, nilai alpha ada dua, yaitu menentukan jika suatu ikan adalah ikan salmon (__decide salmon__) atau ikan seabass (__decide seabass__). Misalkan aksi 'decide salmon' dan kelas salmon diidentifikasikan sebagai angka 0, serta aksi 'decide seabass' dan kelas seabass diidentifikasikan sebagai angka 1, maka nilai *loss function* bisa direpresentasikan sebagai sebuah matriks dengan dimensi 2x2.

Dimensi kolom menyatakan kelas ikan dan dimensi baris menyatakan aksi yang diambil.
"""

loss = [[0, 1], [1, 0]]
for row in loss :
  print(row)

"""Nilai risk dari sebuah aksi alpha_i yang diambil diberikan data x bisa dihitung menggunakan formula perhitungan berikut ini:

> R(alpha_i | x) = Σ(λ(alpha_i | w_j) * P(w_i | x)) untuk setiap kelas j yang ada

Setelah mendapatkan nilai risk untuk masing-masing aksi dan data, maka untuk setiap data bisa diambil aksi yang memiliki nilai risk yang lebih kecil.

Namun pada kasus ini, jumlah aksi dan kelas adalah sebanyak 2, sehingga bisa menggunakan Bayes Decision Rule berbasis Minimum Risk:

> Jika P(x | w_1)/P(x | w_2) > (λ12 - λ22)/(λ21 - λ11) * P(w_2)/P(w_1), maka ambil aksi alpha_1, kalau tidak ambil aksi alpha_2

- Nilai P(x | w_1)/P(x | w_2) disebut *Likelihood Ratio* (LR)
- Nilai (λ12 - λ22)/(λ21 - λ11) * P(w_2)/P(w_1) disebut *Threshold*

Karena nilai P(x | w_2) mungkin sama dengan nol, maka nilainya akan diganti menjadi 1e-323 agar tidak terjadi pembagian oleh nilai nol
"""

def likelihood_ratio(data) :
  try :
    return P_conditional[data]['salmon']/P_conditional[data]['seabass']
  except ZeroDivisionError :
    return P_conditional[data]['salmon']/1e-323

threshold = ((loss[0][1] - loss[1][1]) * P_prior['seabass']) / ((loss[1][0] - loss[0][0]) * P_prior['salmon'])
threshold

for interval in x :
  action = ''
  if likelihood_ratio(interval) > threshold :
    action = 'decide salmon'
  else :
    action = 'decide seabass'
  print('Untuk data ikan dengan interval lightness', interval, ', karena nilai Likelihood Ratio', '>' if likelihood_ratio(interval) > threshold else '<', 'Threshold, maka akan diambil action', action)